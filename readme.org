#+title: Coro

Coroutines are neat.

Note: This is an experiment. Not suitable for any use.

* Coroutines in C

Coroutines are quite easy to implement. By keeping a separate stack for each coroutine it's easy to switch between them.

We use C for simplicity. No name mangling and standard calling conventions. This implementation is for AMD64 Linux.

* Running

You will need a C compiler (~gcc~ is tested, ~clang~ is probably ok), ~make~, and ~nasm~.

#+begin_src bash
make
build/test_coro
#+end_src

* Calling a function from assembly

Calling a coroutine will be similar to calling a function. The only difference is that we need to switch out the stack and set up the coroutine return vector.

On Linux we use the [[https://www.uclibc.org/docs/psABI-x86_64.pdf][System V AMD64 ABI]]. More digestible information can be found at [[https://wiki.osdev.org/Calling_Conventions][OS Dev - Wiki - Calling Conventions]].

** Basic rundown of the calling convention

Parameters are passed in ~rdi~, ~rsi~, ~rdx~, ~rcx~, ~r8~, and ~r9~. Return values are in ~rax~, ~rdx~. The stack needs to be 16-byte aligned. The registers ~rbx~, ~rsp~, ~rbp~, ~r12~, ~r13~, ~r14~, ~r15~ are to be preserved by the callee.

Calling a function with two arguments where the address of the function is stored in ~rax~.
#+begin_src asm
    mov rdi,8
    mov rsi, 13
    call rax
#+end_src
Remember, the result of the function call will be in ~rax~.

** Creating an assembly function that can call a function pointer

In addition to calling a function similar to above we also need to create a working function.

#+begin_src asm
call_pointer:
    ;; Arguments:
    ;;   rdi: function pointer to call
    ;;   rsi: pointer to state, passed to function

    ;; store function pointer
    mov rax, rdi

    ;; Call funtion pointer passsing state
    mov rdi, rsi
    call rax

    ret
#+end_src

** Coroutines

For a coroutine we need to create a new stack and replace the stack pointer with a pointer to this stack instead.

*** Caller API
#+begin_src c
// Create coroutine
Coro* coro_create();
// Destroy coroutine
void coro_destroy(Coro* coro);

int coro_start(Coro* coro, void(*func)(void*, void*), void* data);
// Continue coroutine
int coro_continue(Coro* coro);
#+end_src
*** Callee API
#+begin_src c
// Yield execution to caller
void coro_yield(void* ctx);
// Return execution to caller
void coro_return(void* ctx);
#+end_src

When coroutine is done, return from the coroutine function using ~coro_return~. Returning normally from the coroutine function is not allowed. The ~coro_start~ or ~coro_continue~ functions will then return ~0~.

Don't reuse the same Coro struct for two subsequent ~coro_start~ unless the first has finished.

*** Calling into a coroutine

The flow when first calling a coroutine will be:
1. Set up arguments, stack in ~coro_start~.
2. Jump into coroutine function.
3. Run inside coroutine.
4. Call ~coro_yield~.
5. Restore stack.
6. Return as from ~coro_start~.

When continuing it is similar:
1. Set up stack in ~coro_continue~.
2. Return as from ~coro_yield~.
3. Run inside coroutine.
4. Call ~coro_yield~.
5. Restore stack.
6. Return as from ~coro_continue~.

** Some assembly pitfalls

Make sure which dialect you're using. ~gcc~ defaults to AT&T syntax while Intel syntax is getting more popular. Use the flag ~-masm=intel~ to use Intel syntax. If you do it wrong you will get strange errors.

Using separate assembly routines is easier than inline assembly. Only the calling convention must be upheld, no need to worry about other registers etc. that could get clobbered.

Since the stack is swapped it's important to keep track of which stack is currently active. For example when using the ~pop~ instruction.

Consider the calling convention and which registers are expected to be preserved, or not.
